git  status
git log --oneline
git log --graph
git diff
git diiff branchname branchname
git diff commit_id commit_id

git clone url
git clone -b branchname url
###########################################################################
## reset  :back to the past
## revert :bring item back now
0.
無
1.
git add
2.
git commit
3.
git push
4.
pull request
5.



0 -> 1
new file: git clean -f file_path
diff    : git restore file_path
diff    : git restore .

2 -> 1
git restore --staged file_path
git restore --staged .
git reset file_path
git restore .

3 -> 2
git reset --soft HEAD^(or previous_commit_id)
3 -> 1
git reset --mixed HEAD^(or previous_commit_id)
3 -> 0
git reset --hard HEAD^(or previous_commit_id)

4 -> 3
git reset --soft HEAD^

5 -> 4
git push --delete origin practice

## cancel local merge
git reset --hard ORIG_HEAD
git revert -m 1or2 commit_id
###########################################################################
stash
## before add
git stash save -u "comment"
git stash list
git show stash stash@{i}
git stash apply
git stash drop
###########################################################################
git rev-parse --is-inside-work-tree
git rm --cached ファイル名やディレクトリ名
git commit -m "Untrack ファイル名やディレクトリ名"
###########################################################################
## create new branch
git branch newname
## switch to target branch
git switch targetname
## create and switch to new branch
git switch -c newname
## rename
git branch -m oldname newname
## create and push to remote branch
git push origin branchname
## merge target to current branch
git merge target
