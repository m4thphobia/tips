## Pytorch workflow
1: data (prepare and load)
    torchvision.transforms
    torch.utils.data.Dataset
    torch.utils.data.DataLoader
2: build a model(-->pick a loss function&optimizer-->build a training loop)
    #model, loss function
    torch.nn
    torch.nn.Module
    torchvision.models
    #optimizer
    torch.optim
3: fitting the model to data
4: making predictions and evaluating a model
    torch.metrics
5: Improve through experimentation
    torch.utils.tensorboard
6: saving and loading a model

Machine learning is a game of two parts:
1: Get data into a numerical representation.
2: Build a model to learn patterns in that numerical representation.

## Pytorch model building essentials
1: torch.nn - contains all of the buildings for computational graphs
2: torch.nn.Parameter - what parameters should our model try and learn, often a Pytorch layer from torch.nn will set these for us
3: torch.nn.Module - the base class for all neural network modules. If you subclass it, you should overwite forward()
4: torch.optim - this where the optimizers inPytorch live, they will help with gradient descent
5: def forward() - All nn.Module subclasses require you to overwrite forward()
6: torch.utils.data.Dataset
7: torch.utils.data.Dataloader

## Things we need to train(move from some random parameters to the unknown parameter, from a poor representation of the data to a better representation of th data)
Loss function: A function to measure how wrong your model's predictions are to the ideal outputs
Optimizer: Takes into account the loss of a model and adjust the model's parameters

## Things we need in train loop
1: Loop through the data
2: Forward propagation
3: Calculate the loss
4: Optimizer zero grad
5: Loss backward - move backwards through the network to calculate the gradients
    of each of the parameters of our model with respect to the loss
6: Optimizer step - use the optimizer to adjust our model's parameters to improve the loss

## Saving & loading
torch.save() - allows you save a Pytorch object in Python's pickle format
torch.load() - allows you load a saved Pytorch object
torch.nn.Module/load_state_dict() - allows you to load a model's saved state dictionally


## Computer Vision in Pytorch

torchvision: base domain library in Pytorch for CV
torchvision.datasets: get datasets and data loading functions
torchvision.models: get pretrained computer vision models that you can leverage for your own problems
torchvision.transforms: functions for manipukating your vision data(images) to be suitable for your models
torch.utils.data.Dataset: base dataset class for Pytorch
torch.utils.data.Dataloader: creates a Python iterable over a dataset








import torch
from torch import nn
import matplotlib.pyplot as plt
#print(torch.__version__)
device = "cuda" if torch.cuda.is_available() else "cpu"

